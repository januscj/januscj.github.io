<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chin的博客]]></title>
  <link href="http://januscj.github.io/atom.xml" rel="self"/>
  <link href="http://januscj.github.io/"/>
  <updated>2013-10-03T22:05:57+08:00</updated>
  <id>http://januscj.github.io/</id>
  <author>
    <name><![CDATA[Chin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HashMap源码分析]]></title>
    <link href="http://januscj.github.io/2013/09/29/hashmapyuan-ma-fen-xi/"/>
    <updated>2013-09-29T22:53:00+08:00</updated>
    <id>http://januscj.github.io/2013/09/29/hashmapyuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通读hashMap的源代码之后，发现他的数据结构是这样的。<br/>
<img src="http://januscj.github.io/images/hashmap1.jpg"><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;阅读完源码知道，hashmap是会把indexFor()方法获得的index相同的那些entity放在数组的同一个位置，用一个next引用指向下一个entity，即index相同的entity组成了一个链表。这样来说，如果index的重复越多，链表越长，随机操作的效率就越低。那么jdk是如何计算index的呢？jdk中indexFor()方法的源码是:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">indexFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中leng是hashmap的大小，而h是key的hashCode经过hash()方法处理的结构，hash()方法源码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// This function ensures that hashCodes that differ only by</span>
</span><span class='line'>        <span class="c1">// constant multiples at each bit position have a bounded</span>
</span><span class='line'>        <span class="c1">// number of collisions (approximately 8 at default load factor).</span>
</span><span class='line'>        <span class="n">h</span> <span class="o">^=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">12</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;都说遍历hashmap的时候不一定是按照元素放入的顺序来迭代的，这是怎么回事呢？来看hashmap迭代的关键代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">HashIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>        <span class="c1">// next entry to return</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">expectedModCount</span><span class="o">;</span>   <span class="c1">// For fast-fail</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span><span class="o">;</span>              <span class="c1">// current slot</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">current</span><span class="o">;</span>     <span class="c1">// current entry</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HashIterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">expectedModCount</span> <span class="o">=</span> <span class="n">modCount</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// advance to first entry</span>
</span><span class='line'>                <span class="n">Entry</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">next</span> <span class="o">=</span> <span class="n">t</span><span class="o">[</span><span class="n">index</span><span class="o">++])</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">nextEntry</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">modCount</span> <span class="o">!=</span> <span class="n">expectedModCount</span><span class="o">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ConcurrentModificationException</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">next</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Entry</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">next</span> <span class="o">=</span> <span class="n">t</span><span class="o">[</span><span class="n">index</span><span class="o">++])</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">current</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">current</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">modCount</span> <span class="o">!=</span> <span class="n">expectedModCount</span><span class="o">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ConcurrentModificationException</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">key</span><span class="o">;</span>
</span><span class='line'>            <span class="n">current</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">HashMap</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">removeEntryForKey</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>            <span class="n">expectedModCount</span> <span class="o">=</span> <span class="n">modCount</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通关HashIterator的构造方法和nextEntry方法知:entrySet是按深度优先遍历的，即构造完之后next会指向第一个不为null的元素，迭代的时候nextEntry返回当前元素，在结束的时候
next指向下一个不为空的元素，没有元素，则next为null，依次往下遍历直到next为null。 <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此外key和value的迭代hashmap都是以此类作为父类，写了自己的实现类。key的迭代类KeyIterator:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">KeyIterator</span> <span class="kd">extends</span> <span class="n">HashIterator</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">K</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">nextEntry</span><span class="o">().</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>value的迭代类ValueIterator：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ValueIterator</span> <span class="kd">extends</span> <span class="n">HashIterator</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">V</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">nextEntry</span><span class="o">().</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由此看，jdk的代码的面向对象设计是相当出色的，以后项目的架构设计可以很好的参考jdk。到此，之前的大部分疑问都解决了。还有几个疑问的是，
其中一个就是，我们都知道hashmap在迭代的时候是不能修改的，那我们来看一下代码这是怎么回事呢？<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在hashmap的几个修改方法中都会判断modCount != expectedModCount，如果这两个值不等就会抛出ConcurrentModificationException。
HashIterator构造的时候expectedModCount = modCount;迭代的时候不会修改expctedModCount和modCount,但put、remove都会修改modCount，故在迭代的时候会导致抛出
ConcurrentModificationException。看过官方的文档注释，貌似是为了防止hashmap在多线程下被修改，但问题是这样hashmap在单线程下也不能修改了，我认为这是一个不好的设计。
我想多线程环境没有人会想到用hashmap不做任何同步处理，那样出问题的风险太大了。所以hashmap本身应该只是针对单线程环境的，那就没必要有这样的设计。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用redis实现分布式锁]]></title>
    <link href="http://januscj.github.io/2013/09/24/yong-redisshi-xian-fen-bu-shi-suo/"/>
    <updated>2013-09-24T19:17:00+08:00</updated>
    <id>http://januscj.github.io/2013/09/24/yong-redisshi-xian-fen-bu-shi-suo</id>
    <content type="html"><![CDATA[

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">lock</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">lock</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>    <span class="n">timestamp</span> <span class="o">=</span> <span class="n">current</span> <span class="n">Unix</span> <span class="n">time</span> <span class="o">+</span> <span class="n">lock</span> <span class="n">timeout</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">lock</span> <span class="o">=</span> <span class="n">SETNX</span> <span class="n">lock</span><span class="o">.</span><span class="na">foo</span> <span class="n">timestamp</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lock</span> <span class="o">==</span> <span class="mi">1</span> <span class="n">or</span> <span class="o">(</span><span class="n">now</span><span class="o">()</span> <span class="o">&gt;</span> <span class="o">(</span><span class="n">GET</span> <span class="n">lock</span><span class="o">.</span><span class="na">foo</span><span class="o">)</span> <span class="n">and</span> <span class="n">now</span><span class="o">()</span> <span class="o">&gt;</span> <span class="o">(</span><span class="n">GETSET</span> <span class="n">lock</span><span class="o">.</span><span class="na">foo</span> <span class="n">timestamp</span><span class="o">)):</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">else</span><span class="o">:</span>
</span><span class='line'>        <span class="n">sleep</span><span class="o">(</span><span class="mi">10</span><span class="n">ms</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">do_job</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nf">now</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">GET</span> <span class="n">lock</span><span class="o">.</span><span class="na">foo</span><span class="o">:</span>
</span><span class='line'>    <span class="n">DEL</span> <span class="n">lock</span><span class="o">.</span><span class="na">foo</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bootstrap常用组件]]></title>
    <link href="http://januscj.github.io/2013/09/23/bootstrapchang-yong-zu-jian/"/>
    <updated>2013-09-23T23:17:00+08:00</updated>
    <id>http://januscj.github.io/2013/09/23/bootstrapchang-yong-zu-jian</id>
    <content type="html"><![CDATA[<ul>
<li>suggest控件 <a href="http://nicolasbize.github.io/magicsuggest/" target="_blank">magicsuggest</a></li>
<li>即时编辑控件 <a href="http://vitalets.github.io/x-editable/" target="_blank">xeditable</a></li>
<li>日期时间控件 <a href="http://tarruda.github.io/bootstrap-datetimepicker/" target="_blank">datetimepicker</a></li>
<li>可编辑表格控件 <a href="https://github.com/warpech/jquery-handsontable/" target="_blank">handsontable</a></li>
<li>分页控件</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>   <span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;head&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;link</span> <span class="na">id=</span><span class="s">&quot;bootstrap_221&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">class=</span><span class="s">&quot;library&quot;</span> <span class="na">href=</span><span class="s">&quot;/js/sandbox/bootstrap-2.2.1/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;/head&gt;</span>
</span><span class='line'> <span class="nt">&lt;style&gt;</span>
</span><span class='line'>  <span class="nc">.pagination</span> <span class="nt">ul</span> <span class="o">&gt;</span> <span class="nt">li</span> <span class="o">&gt;</span> <span class="nt">input</span><span class="p">{</span>
</span><span class='line'>         <span class="k">vertical-align</span><span class="o">:</span> <span class="k">top</span><span class="p">;</span>
</span><span class='line'>         <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>          <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>               <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>         <span class="k">height</span><span class="o">:</span><span class="k">auto</span><span class="p">;</span>
</span><span class='line'>         <span class="o">*</span><span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>         <span class="k">margin-bottom</span><span class="o">:</span><span class="m">0px</span><span class="p">;</span>
</span><span class='line'>         <span class="k">background-color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>         <span class="k">border-left-width</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>         <span class="k">width</span><span class="o">:</span><span class="m">40px</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'>         <span class="k">min-height</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>         <span class="o">*</span><span class="k">min-height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="nt">&lt;/style&gt;</span>
</span><span class='line'> <span class="nt">&lt;body&gt;</span>
</span><span class='line'>     <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pagination pagination-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-fast-backward&quot;</span><span class="nt">&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Previous<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>2<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>3<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>4<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>5<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Next<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-fast-forward&quot;</span><span class="nt">&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;input&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>             <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;javascript:void();&quot;</span> <span class="na">onclick=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Go<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/div&gt;</span>
</span><span class='line'> <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado+sqlalchemy的事务管理]]></title>
    <link href="http://januscj.github.io/2013/09/23/tornado-plus-sqlalchemyde-shi-wu-guan-li/"/>
    <updated>2013-09-23T22:46:00+08:00</updated>
    <id>http://januscj.github.io/2013/09/23/tornado-plus-sqlalchemyde-shi-wu-guan-li</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前在项目开发当中遇到tornado+sqlalchemy的事务问题，一直没有时间没去解决。现在空下来了，考虑怎么解决这个问题。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，diango里有自己的middleware来做事务的管理，tornado是不是也能做自己的middelware呢来完成这件事情呢？经过研究，自己来实现tornado的middleware还是比较复杂的。不过网上有牛人写了一个，<a href="https://github.com/iamsk/tmiddleware" target="_blank">tmiddelware</a>。除此以外，使用装饰器是实现也是事务管理一种比较简便的方式。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>     <span class="k">def</span> <span class="nf">transactional</span><span class="p">(</span><span class="n">baseSession</span><span class="p">):</span>
</span><span class='line'>         <span class="k">def</span> <span class="nf">transaction</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>             <span class="k">def</span> <span class="nf">__decorator</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>                 <span class="n">session</span> <span class="o">=</span> <span class="n">baseSession</span><span class="p">()</span>
</span><span class='line'>                 <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                     <span class="n">func</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span><span class="n">session</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>                     <span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>                 <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span><span class="n">e</span><span class="p">:</span>
</span><span class='line'>                     <span class="n">session</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>
</span><span class='line'>                 <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>                     <span class="n">session</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>             <span class="k">return</span> <span class="n">__decorator</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="n">transaction</span>
</span><span class='line'>
</span><span class='line'>     <span class="nd">@transactional</span><span class="p">(</span><span class="n">BaseSession</span><span class="p">)</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">session</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>         <span class="n">city</span> <span class="o">=</span> <span class="n">BaseCity</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;添加城市&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="n">org</span> <span class="o">=</span> <span class="n">BaseOrg</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;添加组织&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">city</span><span class="p">)</span>
</span><span class='line'>         <span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">org</span><span class="p">)</span>
</span><span class='line'>         <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;添加成功&quot;</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
